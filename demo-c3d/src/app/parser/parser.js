/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,8],$V2=[9,27],$V3=[1,29],$V4=[1,28],$V5=[1,25],$V6=[1,23],$V7=[1,27],$V8=[1,32],$V9=[12,23,28,45],$Va=[1,33],$Vb=[12,23,28,30,45],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[12,23,28,30,32,34,35,36,45],$Vh=[1,38],$Vi=[1,39],$Vj=[12,23,28,30,32,34,35,36,37,39,45],$Vk=[1,40],$Vl=[1,41],$Vm=[1,42],$Vn=[12,23,28,30,32,34,35,36,37,39,40,42,43,45],$Vo=[15,20,22,24,27],$Vp=[2,8],$Vq=[1,67],$Vr=[1,68],$Vs=[1,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"program":4,"EOF":5,"declaration_stmts":6,"void_main":7,"declaration_stmt":8,"VOID":9,"MAIN":10,"LPAREN":11,"RPAREN":12,"LBRACE":13,"statements":14,"RBRACE":15,"statement":16,"assign_stmt":17,"while_stmt":18,"println_stmt":19,"WHILE":20,"a":21,"PRINTLN":22,"SEMI":23,"ID":24,"EQ":25,"type":26,"INT":27,"OR":28,"b":29,"AND":30,"c":31,"GREATER":32,"d":33,"LESS":34,"EQEQ":35,"NEQ":36,"PLUS":37,"e":38,"MINUS":39,"TIMES":40,"f":41,"DIVIDE":42,"MOD":43,"POW":44,"COMMA":45,"g":46,"h":47,"INTEGER":48,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"VOID",10:"MAIN",11:"LPAREN",12:"RPAREN",13:"LBRACE",15:"RBRACE",20:"WHILE",22:"PRINTLN",23:"SEMI",24:"ID",25:"EQ",27:"INT",28:"OR",30:"AND",32:"GREATER",34:"LESS",35:"EQEQ",36:"NEQ",37:"PLUS",39:"MINUS",40:"TIMES",42:"DIVIDE",43:"MOD",44:"POW",45:"COMMA",48:"INTEGER"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[7,7],[14,2],[14,0],[16,1],[16,1],[16,1],[16,1],[18,7],[19,5],[17,4],[8,5],[26,1],[21,3],[21,1],[29,3],[29,1],[31,3],[31,3],[31,3],[31,3],[31,1],[33,3],[33,3],[33,1],[38,3],[38,3],[38,3],[38,1],[41,6],[41,1],[46,2],[46,1],[47,1],[47,1],[47,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = new yy.Program(this._$.first_line, this._$.first_column, $$[$0-1], $$[$0]); 
break;
case 3:
 this.$ = new yy.Program(this._$.first_line, this._$.first_column, [], $$[$0]); 
break;
case 4: case 7:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 5:
 this.$ = [$$[$0]]; 
break;
case 6:
 this.$ = new yy.VoidMain(this._$.first_line, this._$.first_column, $$[$0-1]); 
break;
case 8:
 this.$ = []; 
break;
case 9: case 10: case 11: case 12: case 19: case 21: case 26: case 29: case 33: case 35: case 37:
 this.$ = $$[$0]; 
break;
case 13:
 this.$ = new yy.While(this._$.first_line, this._$.first_column, $$[$0-4], $$[$0-1]); 
break;
case 14:
 this.$ = new yy.Print(this._$.first_line, this._$.first_column, $$[$0-2]); 
break;
case 15:
 this.$ = new yy.Assignment(this._$.first_line, this._$.first_column, $$[$0-3], $$[$0-1]); 
break;
case 16:
 this.$ = new yy.Declaration(this._$.first_line, this._$.first_column, $$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 17:
 this.$ = yy.VariableType.INTEGER; 
break;
case 18:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.OR, $$[$0-2], $$[$0]); 
break;
case 20:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.AND, $$[$0-2], $$[$0]); 
break;
case 22:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.GREATER, $$[$0-2], $$[$0]); 
break;
case 23:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.LESS, $$[$0-2], $$[$0]); 
break;
case 24:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.EQEQ, $$[$0-2], $$[$0]); 
break;
case 25:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.NEQ, $$[$0-2], $$[$0]); 
break;
case 27:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.PLUS, $$[$0-2], $$[$0]); 
break;
case 28:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.MINUS, $$[$0-2], $$[$0]); 
break;
case 30:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.TIMES, $$[$0-2], $$[$0]); 
break;
case 31:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.DIVIDE, $$[$0-2], $$[$0]); 
break;
case 32:
 this.$ = new yy.BinaryOperation(this._$.first_line, this._$.first_column, yy.OperationType.MOD, $$[$0-2], $$[$0]); 
break;
case 38:
 this.$ = new yy.Value(this._$.first_line, this._$.first_column, $$[$0], yy.ValueType.INTEGER); 
break;
case 39:
 this.$ = new yy.Value(this._$.first_line, this._$.first_column, $$[$0], yy.ValueType.ID); 
break;
case 40:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,26:7,27:$V1},{1:[3]},{5:[1,9]},{7:10,8:11,9:$V0,26:7,27:$V1},{5:[2,3]},o($V2,[2,5]),{10:[1,12]},{24:[1,13]},{24:[2,17]},{1:[2,1]},{5:[2,2]},o($V2,[2,4]),{11:[1,14]},{25:[1,15]},{12:[1,16]},{11:$V3,21:17,24:$V4,29:18,31:19,33:20,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{13:[1,30]},{23:[1,31],28:$V8},o($V9,[2,19],{30:$Va}),o($Vb,[2,21],{32:$Vc,34:$Vd,35:$Ve,36:$Vf}),o($Vg,[2,26],{37:$Vh,39:$Vi}),o($Vj,[2,29],{40:$Vk,42:$Vl,43:$Vm}),o($Vn,[2,33]),{11:[1,43]},o($Vn,[2,35]),{11:$V3,24:$V4,47:44,48:$V7},o($Vn,[2,37]),o($Vn,[2,38]),o($Vn,[2,39]),{11:$V3,21:45,24:$V4,29:18,31:19,33:20,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},o($Vo,$Vp,{14:46}),o([9,15,20,22,24,27],[2,16]),{11:$V3,24:$V4,29:47,31:19,33:20,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,24:$V4,31:48,33:20,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,24:$V4,33:49,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,24:$V4,33:50,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,24:$V4,33:51,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,24:$V4,33:52,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,24:$V4,38:53,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,24:$V4,38:54,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,24:$V4,39:$V5,41:55,44:$V6,46:24,47:26,48:$V7},{11:$V3,24:$V4,39:$V5,41:56,44:$V6,46:24,47:26,48:$V7},{11:$V3,24:$V4,39:$V5,41:57,44:$V6,46:24,47:26,48:$V7},{11:$V3,21:58,24:$V4,29:18,31:19,33:20,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},o($Vn,[2,36]),{12:[1,59],28:$V8},{8:63,15:[1,60],16:61,17:62,18:64,19:65,20:$Vq,22:$Vr,24:$Vs,26:7,27:$V1},o($V9,[2,18],{30:$Va}),o($Vb,[2,20],{32:$Vc,34:$Vd,35:$Ve,36:$Vf}),o($Vg,[2,22],{37:$Vh,39:$Vi}),o($Vg,[2,23],{37:$Vh,39:$Vi}),o($Vg,[2,24],{37:$Vh,39:$Vi}),o($Vg,[2,25],{37:$Vh,39:$Vi}),o($Vj,[2,27],{40:$Vk,42:$Vl,43:$Vm}),o($Vj,[2,28],{40:$Vk,42:$Vl,43:$Vm}),o($Vn,[2,30]),o($Vn,[2,31]),o($Vn,[2,32]),{28:$V8,45:[1,69]},o($Vn,[2,40]),{5:[2,6]},o($Vo,[2,7]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),{25:[1,70]},{11:[1,71]},{11:[1,72]},{11:$V3,21:73,24:$V4,29:18,31:19,33:20,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,21:74,24:$V4,29:18,31:19,33:20,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,21:75,24:$V4,29:18,31:19,33:20,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{11:$V3,21:76,24:$V4,29:18,31:19,33:20,38:21,39:$V5,41:22,44:$V6,46:24,47:26,48:$V7},{12:[1,77],28:$V8},{23:[1,78],28:$V8},{12:[1,79],28:$V8},{12:[1,80],28:$V8},o($Vn,[2,34]),o($Vo,[2,15]),{13:[1,81]},{23:[1,82]},o($Vo,$Vp,{14:83}),o($Vo,[2,14]),{8:63,15:[1,84],16:61,17:62,18:64,19:65,20:$Vq,22:$Vr,24:$Vs,26:7,27:$V1},o($Vo,[2,13])],
defaultActions: {4:[2,3],8:[2,17],9:[2,1],10:[2,2],60:[2,6]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip */
break;
case 1:return "INTEGER";
break;
case 2:return "VOID";
break;
case 3:return "MAIN";
break;
case 4:return "POW";
break;
case 5:return "INT";
break;
case 6:return "WHILE";
break;
case 7:return "PRINTLN";
break;
case 8:return "PLUS";
break;
case 9:return "MINUS";
break;
case 10:return "TIMES";
break;
case 11:return "DIVIDE";
break;
case 12:return "MOD";
break;
case 13:return "COMMA";
break;
case 14:return "GREATER";
break;
case 15:return "LESS";
break;
case 16:return "EQ";
break;
case 17:return "EQEQ";
break;
case 18:return "NEQ";
break;
case 19:return "AND";
break;
case 20:return "OR";
break;
case 21:return "NOT";
break;
case 22:return "LPAREN";
break;
case 23:return "RPAREN";
break;
case 24:return "LBRACE";
break;
case 25:return "RBRACE";
break;
case 26:return "SEMI";
break;
case 27:return "ID";
break;
case 28:return "EOF";
break;
case 29:
                        console.log(`Error lexico ${yy_.yytext}`);
                        return "INVALID";
                    
break;
}
},
rules: [/^(?:((\r|\n|\r\n)|[ \t\f]))/,/^(?:([0]|[1-9][0-9]*))/,/^(?:(void\b))/,/^(?:(main\b))/,/^(?:(pow|POW\b))/,/^(?:(int\b))/,/^(?:(while\b))/,/^(?:(System\.out\.println\b))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\/))/,/^(?:(%))/,/^(?:(,))/,/^(?:(>))/,/^(?:(<))/,/^(?:(=))/,/^(?:(==))/,/^(?:(!=))/,/^(?:(&&))/,/^(?:(or\b))/,/^(?:(!))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(;))/,/^(?:([a-zA-Z_][a-zA-Z_0-9]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}